// ----------- main.java -----------
package net.samumoila.markdownapp;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyCodeCombination;
import javafx.scene.input.KeyCombination;
import javafx.stage.Stage;

public class main extends Application{

    // Alustetaan käyttöliittymä.
    KayttoLiittyma UI = new KayttoLiittyma();
    // Määritellään muistipaikka ja kutsumanimi käsiteltävälle tekstioliolle.
    static Teksti kasiteltavaTekstiOlio;
    // Tähän sijoitetaan avatun TAI tallennetun tiedoston tiedostopolku.
    static String valitunTiedostonPolku = "";

    public static void main(String[] args) {
        // Luodaan yksi olio valmiiksi, ennen kuin on mitään muita avattu.
        kasiteltavaTekstiOlio = new TekstiMarkdown();
        launch(args);
    }
    @Override
    public void start(Stage primaryStage) {
        // Laitetaan teksti näkyviin isoon kirjoituskenttään.
        UI.setTeksti(kasiteltavaTekstiOlio.getTeksti());
        UI.naytaKasiteltyTeksti(kasiteltavaTekstiOlio.getTeksti());

        // VALIKOIDEN TOIMINNALLISUUDET:
        UI.avaaTiedosto.setOnAction(e -> {
            this.avaaTiedosto(primaryStage);
        });
        UI.tallennaTiedosto.setOnAction(e -> {
            this.tallennaTiedostoon(primaryStage);
        });
        UI.suljeSovellus.setOnAction(e -> {
            System.exit(0);
        });

        // PIKANÄPPÄINTEN TOIMINNALLISUUDET
        // Kopioitu kohdasta "Using accelerator"
        // https://medium.com/@zoha131/handling-keyboard-shortcuts-in-javafx-2972ba950a48
        KeyCombination pikaAvaa = new KeyCodeCombination(KeyCode.O, KeyCombination.CONTROL_DOWN);
        Runnable runnableAvaa = ()-> this.avaaTiedosto(primaryStage);
        KeyCombination pikaTallenna = new KeyCodeCombination(KeyCode.S, KeyCombination.CONTROL_DOWN);
        Runnable runnableTallenna = ()-> this.tallennaTiedostoon(primaryStage);

        // Seurataan ikkunan kokoa ja muutetaan tekstikenttien kokoa tarvittaessa.
        // Idea muokattu täältä: https://stackoverflow.com/questions/38216268/how-to-listen-resize-event-of-stage-in-javafx
        UI.widthProperty().addListener(e -> {
            UI.paivitaKenttienKoko();
        });

        // Päivitetään tekstioliota ja näyttökenttää jokaisen näppäinpainalluksen jälkeen.
        UI.muokkausKentta.setOnKeyTyped(e -> {
            kasiteltavaTekstiOlio.setTeksti(UI.muokkausKentta.getText());
            UI.naytaKasiteltyTeksti(kasiteltavaTekstiOlio.getTeksti());
            UI.paivitaAlapalkki(kasiteltavaTekstiOlio.getCharMaara(), kasiteltavaTekstiOlio.getSanaMaara(), kasiteltavaTekstiOlio.getRiviMaara());
            UI.setAlapalkinStatus(""); // Tyhjennetään status.
        });

        Scene kehys = new Scene(UI);

        // Kopioitu, katso ylempänä "pikanäppäinten toiminnallisuudet".
        kehys.getAccelerators().put(pikaAvaa, runnableAvaa);
        kehys.getAccelerators().put(pikaTallenna, runnableTallenna);

        primaryStage.setScene(kehys);
        primaryStage.setTitle("Markdown-app");
        primaryStage.show();
    }

    private void tallennaTiedostoon(Stage primaryStage) {
        kasiteltavaTekstiOlio.setTeksti(UI.getTeksti()); // Päivitetään teksti muokkauskentästä tekstioliolle.
        valitunTiedostonPolku = UI.kysyTallennusSijainti(primaryStage); // Tähän täytyy syöttää Stage, koska FileChooser tarvitsee
        System.out.println("Saving to file: " + valitunTiedostonPolku);
        TiedostonKasittelija.tallennaTiedosto(kasiteltavaTekstiOlio.getTeksti(), valitunTiedostonPolku);
        UI.setAlapalkinStatus("Tallennettu tiedostoon: " + valitunTiedostonPolku);
    }

    private void avaaTiedosto(Stage primaryStage) {
        valitunTiedostonPolku = UI.kysyAvausSijainti(primaryStage); // Tähän täytyy syöttää Stage, koska FileChooser tarvitsee
        System.out.println("Opening file: " + valitunTiedostonPolku);
        kasiteltavaTekstiOlio.setTeksti(TiedostonKasittelija.lueTiedosto(valitunTiedostonPolku));
        UI.setTeksti(kasiteltavaTekstiOlio.getTeksti());
        UI.naytaKasiteltyTeksti(kasiteltavaTekstiOlio.getTeksti());
        UI.setAlapalkinStatus("Ladattu tiedosto: " + valitunTiedostonPolku);
    }

}



// ----------- KayttoLiittyma.java -----------
package net.samumoila.markdownapp;

import javafx.geometry.Insets;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TextArea;
import javafx.scene.layout.*;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.scene.web.WebView;

import java.io.File;
import java.io.IOException;

class KayttoLiittyma extends BorderPane {
    // Luodaan ylälaidan palkki, johon liitetään eri valikot.
    MenuBar menuBar = new MenuBar();

    // Yläpalkin ensimmäinen valikko ja sen alta löytyvät valinnat.
    Menu menuTiedosto = new Menu("Tiedosto");
    protected MenuItem avaaTiedosto = new MenuItem("Avaa tiedosto...");
    protected MenuItem tallennaTiedosto = new MenuItem("Tallenna");
    protected MenuItem suljeSovellus = new MenuItem("Sulje");

    // Vasemmalla näkyvä iso kirjoituskenttä.
    TextArea muokkausKentta = new TextArea();
    // Oikealla näkyvä tekstialue. Näyttää "käsitellyn" tekstin.
    WebView nayttoKentta = new WebView();

    // Tämä teksti näkyy oikealla, jos kirjoituskenttä on tyhjä.
    String quickStartTeksti = "Try *text* for cursive, or **text** for bold. Get different headings with # or ##.";

    // Muuttuja muokkauskentän ja näyttökentän minimikoon säätämiseen.
    private double tekstialueidenKoko = 200;

    // Tiedostonsijainnin valitsijat
    FileChooser tiedostonValitsija = new FileChooser();
    FileChooser tallennuksenValitsija = new FileChooser();
    // Tiedostonvalitsijoille tiedostoOlio. Tarvitaan oletussijainnin määritykseen File-oliosta.
    File valittuTiedostoOlio = new File("");

    // Alarivin palkki, jossa näytetään tietoja.
    HBox alapalkki = new HBox(10);
    Text merkkiMaaraTeksti = new Text();
    Text sanaMaaraTeksti = new Text();
    Text riviMaaraTeksti = new Text();
    Text alapalkinStatus = new Text();

    // Luodaan valmiiksi markdownparseri
    markdownParser markdownParserOlio = new markdownParser();

    /**
     * Asetetaan edellä luodut asiat paikoilleen. Tätä apumetodia kutsutaan varsinaisessa alustajassa
     * ja näin saadaan pidettyä oikea alustaja siistinä.
     */
    private void alustajaApuri() {
        // Koko ikkunan minimikoko.
        this.setMinSize(600,600);

        // Liitetään yläosan valikoihin halutut asiat.
        menuTiedosto.getItems().addAll(avaaTiedosto, tallennaTiedosto, suljeSovellus);
        menuBar.getMenus().addAll(menuTiedosto);
        this.setTop(menuBar);

        // Säädetään keskiosan tekstikentät.
        muokkausKentta.setPromptText(quickStartTeksti);
        muokkausKentta.setMinSize(tekstialueidenKoko, tekstialueidenKoko);
        nayttoKentta.setMinSize(tekstialueidenKoko, tekstialueidenKoko);
        // Laitetaan kaksi tekstikenttää HBox sisälle, jotta ne ovat tasavertaisia.
        HBox keskiosa = new HBox(muokkausKentta, nayttoKentta);
        this.paivitaKenttienKoko();
        this.setCenter(keskiosa);

        // Alapalkin säädöt
        alapalkki.setPadding(new Insets(5, 5, 5, 5));
        this.paivitaAlapalkki(0, 0, 0);
        alapalkki.getChildren().addAll(merkkiMaaraTeksti, sanaMaaraTeksti, riviMaaraTeksti, alapalkinStatus);
        this.setBottom(alapalkki);

        // Alustetaan tiedostonvalitsijat
        tiedostonValitsija.setTitle("Valitse tiedosto");
        tallennuksenValitsija.setTitle("Valitse tallennuspaikka");
        // Mitä tiedostomuotoja tiedostonvalitsija näyttää? Malli otettu javafx:n dokumentaatiosta.
        tiedostonValitsija.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Text Files", "*.txt","*.md"),
                new FileChooser.ExtensionFilter("All Files", "*.*")
        );
    }

    public KayttoLiittyma() {
        this.alustajaApuri();
        muokkausKentta.setText("");
        }

    public KayttoLiittyma(String text) {
        this.alustajaApuri();
        muokkausKentta.setText(text);
    }

    public void setTeksti(String text) {
        muokkausKentta.setText(text);
    }

    public String getTeksti() {
        return muokkausKentta.getText();
    }

    /**
     * Kysyy käyttäjältä, minkä tiedoston tämä haluaa avata. Käytetään JavaFX:n FileChooser-toimintoa.
     * @param primaryStage
     * @return
     */
    public String kysyAvausSijainti(Stage primaryStage) {
        String tiedostoSijainti;

        if (valittuTiedostoOlio.exists()) {
            // Asetetaan oletuskansio, jos meillä on jo jokin tiedostosijainti tiedossa.
            try {
                this.tiedostonValitsija.setInitialDirectory(new File(valittuTiedostoOlio.getCanonicalFile().getParent()));
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

        // Tässä tapahtuu käyttäjältä tiedustelu.
        valittuTiedostoOlio = this.tiedostonValitsija.showOpenDialog(primaryStage);

        // Selvitetään käyttäjän valitseman tiedoston todellinen tiedostopolku.
        // Tämän täytyy olla try-catch, koska eri käyttöjärjestelmät sekoilee.
        try {
            tiedostoSijainti = valittuTiedostoOlio.getCanonicalPath();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        return tiedostoSijainti;
    }

    /**
     * Kysyy käyttäjältä tallennussijaintia käyttämällä JavaFX:n FileChooser-toimintoa.
     *
     * @param primaryStage
     * @return
     */
    public String kysyTallennusSijainti(Stage primaryStage) {
        String tiedostoSijainti;
        if (valittuTiedostoOlio.exists()) {
            // Asetetaan oletuskansio, jos meillä on jo jokin tiedostosijainti tiedossa.
            try {
                this.tallennuksenValitsija.setInitialFileName(valittuTiedostoOlio.getCanonicalPath());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

        // Tässä tapahtuu käyttäjältä tiedustelu.
        valittuTiedostoOlio = this.tiedostonValitsija.showSaveDialog(primaryStage);

        // Selvitetään käyttäjän valitseman tiedoston todellinen tiedostopolku.
        // Tämän täytyy olla try-catch, koska eri käyttöjärjestelmät sekoilee.
        try {
            tiedostoSijainti = valittuTiedostoOlio.getCanonicalPath();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return tiedostoSijainti;
    }

    /**
     * Päivittää muokkaus- ja näyttökenttien leveyden vastaamaan puolta
     * koko ikkunan leveydestä.
     */
    public void paivitaKenttienKoko() {
        muokkausKentta.setPrefWidth(this.getWidth()/2);
        nayttoKentta.setPrefWidth(this.getWidth()/2);
    }

    public void naytaKasiteltyTeksti(String tekstiIn) {
        // Ei tehdä mitään, jos edellinen renderöinti on vielä kesken.
        if (!markdownParserOlio.getRenderKesken()) {
            markdownParserOlio.setText(tekstiIn);
            // Asetetaan renderöinti pyörimään eri säikeeseen, jotta kuormitus tasoittuu.
            // Syntaksi kopioitu https://stackoverflow.com/a/5853198
            Thread saie = new Thread(() -> markdownParserOlio.run());
            saie.start();
            // Syötetään markdown-parserin tuottama HTML-koodi suoraan WebView näkymään.
            this.nayttoKentta.getEngine().loadContent(markdownParserOlio.getHtml());
        }
    }

    public void paivitaAlapalkki(int charMaara, int sanaMaara, int riviMaara) {
        this.merkkiMaaraTeksti.setText("Merkkejä: " + charMaara);
        this.sanaMaaraTeksti.setText("Sanoja: " + sanaMaara);
        this.riviMaaraTeksti.setText("Rivejä: " + riviMaara);
    }

    public void setAlapalkinStatus(String statusTeksti) {
        this.alapalkinStatus.setText(statusTeksti);
    }
}



// ----------- MarkdownParser.java -----------
package net.samumoila.markdownapp;

import org.commonmark.node.Node;
import org.commonmark.parser.Parser;
import org.commonmark.renderer.html.HtmlRenderer;

public class MarkdownParser implements Runnable {
    // Nämä kolme riviä ovat lähes suoraan markdown-parserin ohjeesta
    // https://github.com/commonmark/commonmark-java?tab=readme-ov-file#parse-and-render-to-html
    private Parser parser = Parser.builder().build();
    private HtmlRenderer renderer = HtmlRenderer.builder().build();
    private Node document;

    private String html = "";
    private boolean renderKesken = false;

    public MarkdownParser() {
        this.document = parser.parse("");
    }

    public MarkdownParser(String tekstiIn) {
        this.document = parser.parse(tekstiIn);
    }

    public void setText(String teksti) {
        this.document = parser.parse(teksti);
    }

    public String getHtml() {
        return html;
    }

    public boolean getRenderKesken() {
        return renderKesken;
    }

    @Override
    public void run() {
        renderKesken = true;
        this.html = renderer.render(document);
        renderKesken = false;
    }
}



// ----------- Teksti.java -----------
package net.samumoila.markdownapp;

/**
 * Kuvastaa yksinkertaisinta mahdollista tekstiä, esimerkiksi txt-tiedostoon tallennettua.
 */
public abstract class Teksti implements TekstiRajapinta {
    private String paaTeksti;
    private int charMaara;
    private int sanaMaara;
    private int riviMaara;

    /**
     * Oletusalustaja, jolla teksti on tyhjä.
     */
    public Teksti() {
        this.paaTeksti = "";
        this.laskeChar();
        this.laskeRivit();
        this.laskeSanat();
    }

    /**
     * Alustaa tekstin annetulla String-oliolla. Käytetään tiedostostalukemisen yhteydessä.
     *
     * @param teksti
     */
    public Teksti(String teksti) {
        this.paaTeksti = teksti;
        this.laskeChar();
        this.laskeRivit();
        this.laskeSanat();
    }

    private void laskeChar() {
        this.charMaara = this.paaTeksti.length();
    }

    /**
     * Lasketaan tekstissä olevien sanojen määrä.
     *
     * Laskentalogiikkaan on otettu mallia ghostwriter-ohjelmasta:
     *  - Sana päättyy, jos tulee joku "white space"-merkki.
     *  - Sana päättyy, jos tulee kaksi erikoismerkkiä peräkkäin.
     */
    private void laskeSanat() {
        int words = 0;
        boolean newWordStarted = false; // Onko tällä hetkellä sana kesken.
        boolean specialCharEncountered = false; // Oliko edellinen merkki erikoismerkki.

        for (int i = 0; i < paaTeksti.length(); i++) {
            char comparisonChar = paaTeksti.charAt(i);

            if (!newWordStarted) {
                if (Character.isLetterOrDigit(comparisonChar)) {
                    // Jos uusi sana ei vielä ollut kesken ja tarkasteltava merkki on kirjain tai numero,
                    // aloitetaan sana ja lisätään sanalaskuria.
                    newWordStarted = true;
                    words++;
                }
            } else { // Sana on siis kesken.
                System.out.println(comparisonChar);
                if (Character.isWhitespace(comparisonChar)) {
                    // Sana päättyy välilyöntiin ja muihin white space -merkkeihin.
                    newWordStarted = false;
                    specialCharEncountered = false;
                } else if (!Character.isLetterOrDigit(comparisonChar)) {
                    if (!specialCharEncountered) {
                        // Kohdataan ensimmäinen erikoismerkki. Sana ei vielä pääty.
                        specialCharEncountered = true;
                    } else {
                        // Kohdataan toinen erikoismerkki, sana päättyy.
                        specialCharEncountered = false;
                        newWordStarted = false;
                    }
                } else {
                    // Kohdattu merkki on siis kirjain tai numero. Ei tehdä mitään ja annetaan sanan jatkua.
                }
            }
        }
        this.sanaMaara = words;
    }

    private void laskeRivit() {
        // https://stackoverflow.com/a/50631407
        this.riviMaara = (int) paaTeksti.lines().count();
    }

    /**
     * Asetetaan uusi tekstiolion teksti. Päivitetään samalla laskurit,
     *
     * @param teksti
     */
    public void setTeksti(String teksti) {
        this.paaTeksti = teksti;
        this.laskeChar();
        this.laskeRivit();
        this.laskeSanat();
    }

    /**
     * Palautetaan tekstiolion teksti String-oliona.
     *
     * @return
     */
    public String getTeksti() {
        return this.paaTeksti;
    }

    /**
     * Palautetaan tekstin merkkimäärä.
     *
     * @return
     */
    public int getCharMaara() {
        return this.charMaara;
    }

    /**
     * Palautetaan tekstin sanamäärä.
     *
     * @return
     */
    public int getSanaMaara() {
        return this.sanaMaara;
    }

    /**
     * Palautetaan tekstin rivimäärä.
     *
     * @return
     */
    public int getRiviMaara() {
        return this.riviMaara;
    }

    /**
     * Palautetaan tekstiolion teksti, sekä merkki-, rivi- ja sanamäärät String-oliona.
     *
     * @return
     */
    @Override
    public String toString() {
        String text = getTeksti() +
                "\nCharacter count:\t" + getCharMaara() +
                "\nRow count:\t\t\t" + getRiviMaara() +
                "\nWord count:\t\t\t" + getSanaMaara();
        return text;
    }
}



// ----------- TekstiMarkdown.java -----------
package net.samumoila.markdownapp;

/**
 * Tämä luokka tulee sisältämään markdown-tekstiin liittyviä muuttujia ja metodeja. Kenties yläotsikoiden määrä?
 * Yläotsikoiden rivisijainti? Täytän tämän, kunhan olen keksinyt, miten käsittelen markdown-kielen asioita.
 */
public class TekstiMarkdown extends Teksti {
    public TekstiMarkdown(String teksti) {
        super(teksti);
    }
    public TekstiMarkdown() {
        super();
    }
}


// ----------- TekstiRajapinta.java -----------
package net.samumoila.markdownapp;

/**
 * Tämä rajapinta on olemassa, jotta tulevaisuudessa ohjelman käyttöä voi laajentaa muihinkin tiedostomuotoihin
 * kuin "txt" ja "md".
 */
public interface TekstiRajapinta {

    void setTeksti(String teksti);

    String getTeksti();
    int getCharMaara();
    int getSanaMaara();
    int getRiviMaara();
}



// ----------- TiedostonKasittelija.java -----------
package net.samumoila.markdownapp;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;

/**
 * Lukee tiedoston tiedostopolusta ja palauttaa sen sisällön String-oliona.
 */
class TiedostonKasittelija {
    /**
     *
     * @param tiedostoPolku
     * @return String-olio
     * @throws Exception
     */
    public static String lueTiedosto(String tiedostoPolku) {
        String palautusTeksti = "";
        try {
            // Tiedoston lukeminen on kopioitu tämän sivun kohdasta 5:
            // https://www.geeksforgeeks.org/different-ways-reading-text-file-java/
            palautusTeksti = new String(Files.readAllBytes(Paths.get(tiedostoPolku)));
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return palautusTeksti;
    }
    /*
    Tähän luodaan virheenhallinta. Palauttaa eri virhekoodeilla tiedon pääohjelmaan, mikä meni pieleen.
     */


    public static void tallennaTiedosto (String tallennettavaTeksti, String tiedostoPolku) {
        try {
            PrintWriter kirjoittaja = new PrintWriter(tiedostoPolku);
            kirjoittaja.write(tallennettavaTeksti);
            kirjoittaja.close();
            System.out.println("Tallennus onnistui!");
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
    }
}



// ----------- module-info.java -----------
module net.samumoila.markdownapp {
    requires javafx.controls;
    requires javafx.fxml;
    // Nämä tarvittiin tähän projektiin erityisesti.
    requires javafx.web;
    requires org.commonmark;

    opens net.samumoila.markdownapp to javafx.fxml;
    exports net.samumoila.markdownapp;
}

// ----------- pom.xml -----------
// Tässä on pelkät lisäykset, siltä varalta, että koko tiedosto sotkee teidän asennusta.
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-web</artifactId>
            <version>22</version>
        </dependency>
        <dependency>
            <groupId>org.commonmark</groupId>
            <artifactId>commonmark</artifactId>
            <version>0.21.0</version>
        </dependency>



// ----------- pom.xml -----------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>net.samumoila</groupId>
    <artifactId>markdown-app</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>markdown-app</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>5.10.0</junit.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>21</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>21</version>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-web</artifactId>
            <version>22</version>
        </dependency>
        <dependency>
            <groupId>org.commonmark</groupId>
            <artifactId>commonmark</artifactId>
            <version>0.21.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <executions>
                    <execution>
                        <!-- Default configuration for running with: mvn clean javafx:run -->
                        <id>default-cli</id>
                        <configuration>
                            <mainClass>net.samumoila.markdownapp/net.samumoila.markdownapp.HelloApplication</mainClass>
                            <launcher>app</launcher>
                            <jlinkZipName>app</jlinkZipName>
                            <jlinkImageName>app</jlinkImageName>
                            <noManPages>true</noManPages>
                            <stripDebug>true</stripDebug>
                            <noHeaderFiles>true</noHeaderFiles>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>