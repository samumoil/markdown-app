# Markdown-app - Käyttäjän opas

## Asennus

Ohjelman kehitystiedostot, muistiinpanot sekä tämä dokumentti löytyvät osoitteesta [https://github.com/samumoil/markdown-app](https://github.com/samumoil/markdown-app) ja halutessasi voit ladata ohjelman tiedot zip-pakettina suoraan [tästä linkistä](https://github.com/samumoil/markdown-app/archive/refs/heads/main.zip). Ladattu zip-paketti täytyy purkaa ja avata projektin tiedot esimerkiksi IntelliJ-ohjelmistolla. Avattuasi projektin täytyy se vielä kääntää ja sitten ajaa.

## Käyttö

Ohjelman avattuasi näet käytössäsi kaksi vierekkäistä kenttää, vasemmalla *muokkauskentän* ja oikealla *näyttökentän*. Kirjoita haluamasi teksti muokkauskenttään ja ohjelma näyttää tekstisi markdown-kielellä muutettuna näyttökentässä.

Näet tekstisi sisältämän merkki-, rivi- ja sanamäärän alapalkin vasemmassa laidassa.

Halutessasi voit piilottaa näyttökentän ohjelmaikkunan oikeassa alalaidassa olevasta napista. Saat näytön takaisin samasta napista.

Tiedostojen avaus ja tallennus tapahtuu joko pikanäppäimillä *ctrl+o* ja *ctrl+s* tai tiedostovalikon kautta.

### Aloitusnäkymä

![](markdown-app_aloituskuva.png)

### Malliteksti

![](markdown-app_malliteksti.png)

# Kehittäjän opas

## Ohjelman rakenne

Ohjelman UML-kaavion näet alla ja siitä huomaat, että ohjelman toiminta jakautuu kolmeen osaan: Teksti-olio, käyttöliittymä (sisältäen markdown-parserin) sekä tiedostonkäsittelijä. Pääohjelma käyttää pääosan kaikesta toimintalogiikasta, lukuunottamatta markdown-parserin käyttöä.

Kirjoitetun tekstin *source-of-truth* on teksti-olion paaTeksti attribuutti, johon kirjoitettu teksti päivitetään jokaisen muutoksen jälkeen, ja joka haetaan tarvittaessa eri toimintoihin. Ohjelman suunnitteluvaiheessa on ajateltu ohjelman olevan laajennettavissa monenlaisiin tekstitiedostoihin, mutta niitä ei ole vielä toteutettu. Tämän vuoksi tekstimarkdown-olio pohjautuu rajapintaan ja abstraktiin luokkaan "teksti".

TekstiMarkdown-luokkaan on tarkoitus toteuttaa erityisesti markdown-tekstiin liittyviä asioita. Näitä voisivat olla tulevaisuudessa esimerkiksi pääotsikoiden rivisijainti, linkkien kerääminen listaan ja ulkoisten kuvien listaaminen. Näitä asioita voisi halutessaan näyttää käyttöliittymällä.

Tekstin renderöinti toteutetaan erillisessä säikeessä, jotta ohjelma toimii sulavasti myös pitkien tekstien kanssa. Tällä hetkellä koodi on toteutettu niin, että pitkän renderöinnin aikana kirjoitettu teksti otetaan käsittelyyn vasta, kun edellinen renderöinti on ohi. Eli välttämättä jokaisen kirjaimen jälkeen ei tapahdu renderöintiä, mutta näin varmistetaan ohjelman sulava käyttö.

Tekstin näyttämiseen markdown-kielellä käytetään projektia nimeltä [commonmark-java](https://github.com/commonmark/commonmark-java). Projekti tuodaan ohjelmaan moduulina.

### UML-kaavio

Kaaviossa näkyvät kaikki ohjelman toiminnan kannalta olennaiset attribuutit ja metodit.

![](markdown-app_UML.png)

### Javadoc

Ohjelman javadoc-dokumentaatio löytyy osoitteesta [https://github.com/samumoil/markdown-app/tree/main/javadoc](https://github.com/samumoil/markdown-app/tree/main/javadoc).

## Kehityskohteet

Ohjelmassa on kaksi selkeää kehityskohdetta: ulkoasu ja erilaisten tiedostomuotojen tukeminen.

Ulkoasua voisi hioa ainakin lisäämällä "darkmode" ja käyttämällä yhtenäisiä fontteja.

Tiedostomuotojen lukemiseen ja tiedostopäätteen perusteella tapahtuvaan toiminnanohjaamiseen voisi paneutua jatkokehityksessä. Tällä hetkellä rajapinnan ja erilaisten teksti-luokkien käyttö on vasta suunnitteluasteella.

# PROJEKTIKERTOMUS

Itä-Suomen yliopiston Ohjelmointi II -kurssin lopputyönä opiskelijoiden tuli koodata itse ohjelma, joka monipuolisesti hyödyntää Java-kielen luokkia, rajapintoja sekä javafx-ulkoasun ominaisuuksia. Olen jo jonkin aikaa ollut kiinnostunut Markdown-kielestä ja siitä sain ajatuksen tehdä oma markdown-editori. 

Mielestäni projektin koodaus oli mielekästä enkä missään vaiheessa ollut aivan pulassa koodin kanssa. Yksi isompi takaisku tai luovutus tapahtui, kun päätin, etten ala itse koodaamaan markdown-parseria, vaan otin käyttöön valmiin parserin. Mielestäni tämä oli kuitenkin oikea päätös, koska erilaiset algoritmit ja tiedon analysointi ei ollut tämän kurssin pääaiheena.

Markdown-editori oli muuten oikein hyvä valinta projektityöksi, mutta siinä en päässyt ehkä niin hyvin esittelemään javafx-osaamistani, kuin olisin halunnut. En myöskään päässyt käyttämään hyödyksi javan geneerisiä luokkia tai linkitettyä listaa, joita olisin halunnut kokeilla käytännössä.

Koen onnistuneeni hyvin luokkien suunnittelussa. Apuluokat eivät ole riippuvaisia toisistaan ja ohjelman logiikkaa ohjataan yhdestä tai kahdesta paikasta. Luokkien eriyttäminen on ollut luonnollinen ajatus ja tässä sitä pääsi harjoittelemaan hyvin. Myös dokumentaatio on mielestäni onnnistunut hyvin ja opin tekemään koodin logiikkaan liittyvää dokumentaatiota osana koodausta.

Parannettavaa tässä työssä on kesken jäänyt rajapinnan ja Teksti-luokan hyödyntäminen. Tarkoitukseni oli luoda tiedoston avaamiseen logiikka, joka tunnistaa tiedostopäätteen ja sen perusteella luo käsiteltävästä tekstioliosta joko markdown-olion tai tavallisen tekstiolion. Tähän en kuitenkaan ryhtynyt ajanpuutteen vuoksi. Käyttöliittymän väritystä ja muuta pientä yksityiskohtaa olisi ehkä voinut myös hioa, mutta mielestäni se on nyt käyttäjän näkökulmasta jo riittävän selkeä.

# Päiväkirja projektin etenemisestä

## 05.03. - 0,25h
- Projektin aloitus ja materiaaliin tutustuminen. Alkuperäisen idean keksiminen ja ilmoitus keskustelualueelle.

## 11.03. - 5,75h
- Työn vaatimusten kertausta
- Alustava suunnitelma luokkien tehtävistä
- TextSimple aika lähelle valmista
- Muiden luokkien alustava runko
- Yritin saada iteraattoria toimimaan

## 12.03. - 3h
- Sain toimimaan TextSimple wordCount
- Ensimmäinen versio käyttöliittymästä.
- MenuBar

## 14.03. - 2h
- Tiedoston avausta ja tallennusta
- FileChooser
- Englanninkieliset asiat suomeksi

## 15.03. - 2,5h
- Tekstikenttien koko ja reagointi ikkunan koon muutokseen.

## 21.03. - 1h
- Yritetty saada omaa markdown toimintalogiikkaa toimimaan.

## 22.03. - 4h
- Hylätty oman logiikan käyttö ja etsitty sopivaa valmista parseria.
- Otetaan käyttöön https://github.com/commonmark/commonmark-java
- Päivitetty pom.xml and module-info.java sisältämään vaadittavat rivit.
- Markdown-logiikka toimii nyt oikein.
- Luotu säikeitä hyödyntävä markdown-renderöinti. (Se ei vielä toiminut oikein tässä vaiheessa.)

## 24.03. - 2h
- Lisätty dokumentaatiota.
- Löydetty ja poistettu system.out.println joka aiheutti tekstin tulostuksen komentoriville.
- Hienosäädetty avaus- ja tallennusikkunoiden asioita. Vielä kesken.
- Muita pikkusäätöjä ja logiikan parantamista.

## 25.03. - 3h
- Lisätty dokumentaatiota.
- Korjattu renderöinnin "lagi". Tuli uusi ongelma tilalle, kun tervetuloteksti ei näy.
- Aloitettu käymään läpi muuttujia ja muutettu niitä private/protected.

## 26.03. - 3,5h
- Viimeistelty dokumentaatio.
- Luotu dokumentaatio pääkansioon.
- Hienosäädetty projektin määrittelytiedostoja.

## 27.3. - 1h
- Pientä hienosäätöä
- Lisätty "piilota/näytä markdown"-nappi ja sen toiminnallisuus

# Itsearviointi

Hyväksytty aihe (1 piste)
   - 1p - Aihe hyväksytty

Hyväksytty olioluokka (1 piste)
   - 1p - Olioluokka hyväksytty

Hyväksytty keskeneräisen ohjelman palautus (1 piste)
   - 1p - Keskeneräinen ohjelma palautettu

Ohjelmakoodi: toteuttaa suunnitelman, koodin loogisuus, selkeys ja yleisesti hyvien Javakielen ohjelmoinnin periaatteiden noudattaminen (6 p)
   - 6p - Ohjelma toteuttaa suunnitelman. Koodi ja sen dokumentaatio on tehty selkeästi ja kattavasti. Luokkien käyttö ja rajaus on loogista. Muuttujien, metodien ja luokkien nimet on merkitty käytänteiden mukaan.

Kurssilla käsiteltyjen asioiden monipuolinen käyttö ohjelmassa (luokat, rajapinta, abstrakti luokka, graafisen käyttöliittymän ominaisuudet) (6 p)
   - 5p - Ohjelmassa käytetään erilaisia luokkia ja niiden suhteita. Tosin osa niiden käytöstä on vain "valmistautumista jatkokehitykseen". Käyttöliittymässä ei käytetä kaikkia kurssin asioita erityisen monipuolisesti, mutta toisaalta on opiskeltu itse uusia asioita ja käytetty niitä (valikot ja pikanäppäimet).

Ohjelman aiheen ja sen toteutuksen haasteellisuus (6 p)
   - 4p - Tämän osion arvioinnin koin haastavaksi, koska käsitys "perusohjelman" haasteellisuudesta on vaikea muodostaa. Mielestäni ohjelman kokonaisuus on kurssin tehtäviin nähden melko haastava, muttei ehkä "erityisen" haastava.

JavaDoc: dokumentaation kattavuus (onko kaikki dokumentoitu) ja laajuus (kuinka kuvaavia kuvaukset ovat) (6 p)
   - 6p - Kaikki julkiset luokat ja metodit sekä itse pakkaus ja moduuli on dokumentoitu. Dokumentoinnin laajuus kattaa arvioinnin kohdat.

Kehittämisopas: ohjelman kuvauksen kattavuus ja sen antamat eväät jatkokehitykselle; asennusohjeen ja käyttöohjeen selkeys (6 p)
   - 6p - Oppaassa on selostettu luokkien ja metodien väliset suhteet ja avattu ohjelman toimintalogiikkaa.

Projektikertomus: ajankäytön selvityksen kattavuus ja tarkkuus; oman oppimisen arvioinnin
   monipuolisuus ja kattavuus (1 p)
   - 1p - Projektikertomuksessa on kuvattu prosessia ja arvioitu omaa oppimista.

Itsearviointi (osana projektikertomusta): arvostelun eri osien pisteytys ja kunkin osan pisteiden perustelut (1 p)
   - 1p - Kukin osa-alue on arvioitu ja perusteltu.

